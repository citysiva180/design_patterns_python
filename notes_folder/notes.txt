######################################################################
  ___  ___ ___ ___ ___ _  _   ___  _ _____ _____ ___ ___ _  _ ___ 
 |   \| __/ __|_ _/ __| \| | | _ \/_\_   _|_   _| __| _ \ \| / __|
 | |) | _|\__ \| | (_ | .` | |  _/ _ \| |   | | | _||   / .` \__ \
 |___/|___|___/___\___|_|\_| |_|/_/ \_\_|   |_| |___|_|_\_|\_|___/
                                                                  
######################################################################

Design Patterns - total of 4.5 hrs 

1. Introduction 
2. Creational Patterns 

    - Singleton 
    - Factory Method 
    - Abstract Factory 
    - Builder 
    - Prototype 

3. Structural Design Patterns 

    - Adapter 
    - Bridge 
    - Composite 
    - Decorator 
    - Facade 
    - Flyweight 
    - Proxy 

4. Behavioural Design patterns 

    - Chain of Responsibility 
    - Command 
    - Interpreter 
    - Iterator 
    - Mediator 
    - Memento 
    - Observer 
    - State 
    - Strategy 
    - Template Method 
    - Visitor 

#+++++++++++++++++++++#
#  Singleton Pattern! |
#+++++++++++++++++++++#

The Singleton design pattern is a creational design pattern that ensures a class 
has only one instance and provides a global point of access to that instance. 
In other words, it restricts the instantiation of a class to a single instance 
and provides a way to access that instance from any part of the code.

- Breaks single Responsibility 
- Testability issues 
- State for life

#+++++++++++++++++++++#
#  Factory Pattern!   |
#+++++++++++++++++++++#

"The Factory Method is a design pattern that defines an interface for creating 
objects in a super class, but allows subclasses to decide which class to instantiate."

In other words, the Factory Method pattern provides a way to create objects by 
delegating the responsibility of instantiation to subclasses. This promotes flexibility 
and allows different subclasses to create different types of objects while adhering to 
a common interface

#++++++++++++++++++++++++++++++#
#  Abstract Factory Pattern!   |
#++++++++++++++++++++++++++++++#

The Abstract Factory pattern is a design pattern that provides an interface for creating
families of related or dependent objects without specifying their concrete classes. It 
allows you to create objects that are related by a common theme or concept, such as creating 
different types of products in a system.


#+++++++++++++++++++++#
#  Builder Pattern!   |
#+++++++++++++++++++++#

"The Builder Pattern is a design pattern that separates the construction of a 
complex object from its representation, allowing the same construction process to 
create different representations."

In other words, the Builder Pattern provides a way to construct complex objects 
step by step, enabling you to create different variations of the object by using 
the same construction process. It promotes flexibility, reusability, and separation 
of concerns in object creation.

#+++++++++++++++++++++#
#  Prototype Pattern! |
#+++++++++++++++++++++#

The Prototype Pattern is a creational design pattern that allows you to create 
new objects by copying an existing instance, known as the prototype. It helps in 
creating new objects with the same state as an existing object, avoiding the need 
to explicitly define and initialize every attribute and property.

An analogy for the Prototype Pattern is a photocopying machine. Imagine you have an 
original document, and you want to create multiple copies of it. Instead of rewriting 
the entire content for each copy, you can use a photocopying machine to duplicate the 
original. Similarly, the Prototype Pattern allows you to create new objects by cloning 
an existing object, which serves as the prototype.

